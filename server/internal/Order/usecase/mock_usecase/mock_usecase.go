// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	dto "server/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderUsecaseI is a mock of OrderUsecaseI interface.
type MockOrderUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUsecaseIMockRecorder
}

// MockOrderUsecaseIMockRecorder is the mock recorder for MockOrderUsecaseI.
type MockOrderUsecaseIMockRecorder struct {
	mock *MockOrderUsecaseI
}

// NewMockOrderUsecaseI creates a new mock instance.
func NewMockOrderUsecaseI(ctrl *gomock.Controller) *MockOrderUsecaseI {
	mock := &MockOrderUsecaseI{ctrl: ctrl}
	mock.recorder = &MockOrderUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUsecaseI) EXPECT() *MockOrderUsecaseIMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderUsecaseI) CreateOrder(reqOrder *dto.ReqCreateOrder) (*dto.RespCreateOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", reqOrder)
	ret0, _ := ret[0].(*dto.RespCreateOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderUsecaseIMockRecorder) CreateOrder(reqOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderUsecaseI)(nil).CreateOrder), reqOrder)
}

// GetOrder mocks base method.
func (m *MockOrderUsecaseI) GetOrder(reqOrder *dto.ReqGetOneOrder) (*dto.RespGetOneOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", reqOrder)
	ret0, _ := ret[0].(*dto.RespGetOneOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderUsecaseIMockRecorder) GetOrder(reqOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderUsecaseI)(nil).GetOrder), reqOrder)
}

// GetOrders mocks base method.
func (m *MockOrderUsecaseI) GetOrders(userId uint) (*dto.RespOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", userId)
	ret0, _ := ret[0].(*dto.RespOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderUsecaseIMockRecorder) GetOrders(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderUsecaseI)(nil).GetOrders), userId)
}

// UpdateOrder mocks base method.
func (m *MockOrderUsecaseI) UpdateOrder(reqOrder *dto.ReqUpdateOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", reqOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderUsecaseIMockRecorder) UpdateOrder(reqOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderUsecaseI)(nil).UpdateOrder), reqOrder)
}
