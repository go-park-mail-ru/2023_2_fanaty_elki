// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	dto "server/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockRestaurantUsecaseI is a mock of RestaurantUsecaseI interface.
type MockRestaurantUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantUsecaseIMockRecorder
}

// MockRestaurantUsecaseIMockRecorder is the mock recorder for MockRestaurantUsecaseI.
type MockRestaurantUsecaseIMockRecorder struct {
	mock *MockRestaurantUsecaseI
}

// NewMockRestaurantUsecaseI creates a new mock instance.
func NewMockRestaurantUsecaseI(ctrl *gomock.Controller) *MockRestaurantUsecaseI {
	mock := &MockRestaurantUsecaseI{ctrl: ctrl}
	mock.recorder = &MockRestaurantUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantUsecaseI) EXPECT() *MockRestaurantUsecaseIMockRecorder {
	return m.recorder
}

// GetCategories mocks base method.
func (m *MockRestaurantUsecaseI) GetCategories() (*dto.StringSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].(*dto.StringSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockRestaurantUsecaseIMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).GetCategories))
}

// GetRandomRestaurantTips mocks base method.
func (m *MockRestaurantUsecaseI) GetRandomRestaurantTips() (*dto.RestaurantWithCategoriesSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomRestaurantTips")
	ret0, _ := ret[0].(*dto.RestaurantWithCategoriesSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomRestaurantTips indicates an expected call of GetRandomRestaurantTips.
func (mr *MockRestaurantUsecaseIMockRecorder) GetRandomRestaurantTips() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomRestaurantTips", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).GetRandomRestaurantTips))
}

// GetRestaurantByID mocks base method.
func (m *MockRestaurantUsecaseI) GetRestaurantByID(id uint) (*dto.RestaurantWithCategories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantByID", id)
	ret0, _ := ret[0].(*dto.RestaurantWithCategories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantByID indicates an expected call of GetRestaurantByID.
func (mr *MockRestaurantUsecaseIMockRecorder) GetRestaurantByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantByID", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).GetRestaurantByID), id)
}

// GetRestaurantProducts mocks base method.
func (m *MockRestaurantUsecaseI) GetRestaurantProducts(id uint) (*dto.MenuTypeWithProductsSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantProducts", id)
	ret0, _ := ret[0].(*dto.MenuTypeWithProductsSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantProducts indicates an expected call of GetRestaurantProducts.
func (mr *MockRestaurantUsecaseIMockRecorder) GetRestaurantProducts(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantProducts", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).GetRestaurantProducts), id)
}

// GetRestaurantTips mocks base method.
func (m *MockRestaurantUsecaseI) GetRestaurantTips(SessionToken string) (*dto.RestaurantWithCategoriesSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantTips", SessionToken)
	ret0, _ := ret[0].(*dto.RestaurantWithCategoriesSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantTips indicates an expected call of GetRestaurantTips.
func (mr *MockRestaurantUsecaseIMockRecorder) GetRestaurantTips(SessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantTips", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).GetRestaurantTips), SessionToken)
}

// GetRestaurants mocks base method.
func (m *MockRestaurantUsecaseI) GetRestaurants() (*dto.RestaurantWithCategoriesSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurants")
	ret0, _ := ret[0].(*dto.RestaurantWithCategoriesSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurants indicates an expected call of GetRestaurants.
func (mr *MockRestaurantUsecaseIMockRecorder) GetRestaurants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurants", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).GetRestaurants))
}

// GetRestaurantsByCategory mocks base method.
func (m *MockRestaurantUsecaseI) GetRestaurantsByCategory(name string) (*dto.RestaurantWithCategoriesSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurantsByCategory", name)
	ret0, _ := ret[0].(*dto.RestaurantWithCategoriesSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurantsByCategory indicates an expected call of GetRestaurantsByCategory.
func (mr *MockRestaurantUsecaseIMockRecorder) GetRestaurantsByCategory(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurantsByCategory", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).GetRestaurantsByCategory), name)
}

// Search mocks base method.
func (m *MockRestaurantUsecaseI) Search(word string) (*dto.RestaurantWithCategoriesAndProductsSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", word)
	ret0, _ := ret[0].(*dto.RestaurantWithCategoriesAndProductsSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRestaurantUsecaseIMockRecorder) Search(word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRestaurantUsecaseI)(nil).Search), word)
}
