// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	dto "server/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockCartUsecaseI is a mock of CartUsecaseI interface.
type MockCartUsecaseI struct {
	ctrl     *gomock.Controller
	recorder *MockCartUsecaseIMockRecorder
}

// MockCartUsecaseIMockRecorder is the mock recorder for MockCartUsecaseI.
type MockCartUsecaseIMockRecorder struct {
	mock *MockCartUsecaseI
}

// NewMockCartUsecaseI creates a new mock instance.
func NewMockCartUsecaseI(ctrl *gomock.Controller) *MockCartUsecaseI {
	mock := &MockCartUsecaseI{ctrl: ctrl}
	mock.recorder = &MockCartUsecaseIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUsecaseI) EXPECT() *MockCartUsecaseIMockRecorder {
	return m.recorder
}

// AddProductToCart mocks base method.
func (m *MockCartUsecaseI) AddProductToCart(SessionToken string, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToCart", SessionToken, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductToCart indicates an expected call of AddProductToCart.
func (mr *MockCartUsecaseIMockRecorder) AddProductToCart(SessionToken, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToCart", reflect.TypeOf((*MockCartUsecaseI)(nil).AddProductToCart), SessionToken, productID)
}

// CleanCart mocks base method.
func (m *MockCartUsecaseI) CleanCart(SessionToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanCart", SessionToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanCart indicates an expected call of CleanCart.
func (mr *MockCartUsecaseIMockRecorder) CleanCart(SessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanCart", reflect.TypeOf((*MockCartUsecaseI)(nil).CleanCart), SessionToken)
}

// DeleteProductFromCart mocks base method.
func (m *MockCartUsecaseI) DeleteProductFromCart(SessionToken string, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductFromCart", SessionToken, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductFromCart indicates an expected call of DeleteProductFromCart.
func (mr *MockCartUsecaseIMockRecorder) DeleteProductFromCart(SessionToken, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductFromCart", reflect.TypeOf((*MockCartUsecaseI)(nil).DeleteProductFromCart), SessionToken, productID)
}

// GetCartTips mocks base method.
func (m *MockCartUsecaseI) GetCartTips(SessionToken string) (*dto.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartTips", SessionToken)
	ret0, _ := ret[0].(*dto.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartTips indicates an expected call of GetCartTips.
func (mr *MockCartUsecaseIMockRecorder) GetCartTips(SessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartTips", reflect.TypeOf((*MockCartUsecaseI)(nil).GetCartTips), SessionToken)
}

// GetUserCart mocks base method.
func (m *MockCartUsecaseI) GetUserCart(SessionToken string) (*dto.CartWithRestaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCart", SessionToken)
	ret0, _ := ret[0].(*dto.CartWithRestaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCart indicates an expected call of GetUserCart.
func (mr *MockCartUsecaseIMockRecorder) GetUserCart(SessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCart", reflect.TypeOf((*MockCartUsecaseI)(nil).GetUserCart), SessionToken)
}
