// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	entity "server/internal/domain/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepositoryI is a mock of CartRepositoryI interface.
type MockCartRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryIMockRecorder
}

// MockCartRepositoryIMockRecorder is the mock recorder for MockCartRepositoryI.
type MockCartRepositoryIMockRecorder struct {
	mock *MockCartRepositoryI
}

// NewMockCartRepositoryI creates a new mock instance.
func NewMockCartRepositoryI(ctrl *gomock.Controller) *MockCartRepositoryI {
	mock := &MockCartRepositoryI{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepositoryI) EXPECT() *MockCartRepositoryIMockRecorder {
	return m.recorder
}

// AddProductToCart mocks base method.
func (m *MockCartRepositoryI) AddProductToCart(cartID, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToCart", cartID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductToCart indicates an expected call of AddProductToCart.
func (mr *MockCartRepositoryIMockRecorder) AddProductToCart(cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToCart", reflect.TypeOf((*MockCartRepositoryI)(nil).AddProductToCart), cartID, productID)
}

// CheckProductCount mocks base method.
func (m *MockCartRepositoryI) CheckProductCount(cartID, productID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductCount", cartID, productID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductCount indicates an expected call of CheckProductCount.
func (mr *MockCartRepositoryIMockRecorder) CheckProductCount(cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductCount", reflect.TypeOf((*MockCartRepositoryI)(nil).CheckProductCount), cartID, productID)
}

// CheckProductInCart mocks base method.
func (m *MockCartRepositoryI) CheckProductInCart(cartID, productID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductInCart", cartID, productID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductInCart indicates an expected call of CheckProductInCart.
func (mr *MockCartRepositoryIMockRecorder) CheckProductInCart(cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductInCart", reflect.TypeOf((*MockCartRepositoryI)(nil).CheckProductInCart), cartID, productID)
}

// CleanCart mocks base method.
func (m *MockCartRepositoryI) CleanCart(cartID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanCart", cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanCart indicates an expected call of CleanCart.
func (mr *MockCartRepositoryIMockRecorder) CleanCart(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanCart", reflect.TypeOf((*MockCartRepositoryI)(nil).CleanCart), cartID)
}

// CreateCart mocks base method.
func (m *MockCartRepositoryI) CreateCart(UserID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", UserID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartRepositoryIMockRecorder) CreateCart(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartRepositoryI)(nil).CreateCart), UserID)
}

// DeleteProductFromCart mocks base method.
func (m *MockCartRepositoryI) DeleteProductFromCart(cartID, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductFromCart", cartID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductFromCart indicates an expected call of DeleteProductFromCart.
func (mr *MockCartRepositoryIMockRecorder) DeleteProductFromCart(cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductFromCart", reflect.TypeOf((*MockCartRepositoryI)(nil).DeleteProductFromCart), cartID, productID)
}

// GetCartByUserID mocks base method.
func (m *MockCartRepositoryI) GetCartByUserID(UserID uint) (*entity.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserID", UserID)
	ret0, _ := ret[0].(*entity.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByUserID indicates an expected call of GetCartByUserID.
func (mr *MockCartRepositoryIMockRecorder) GetCartByUserID(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserID", reflect.TypeOf((*MockCartRepositoryI)(nil).GetCartByUserID), UserID)
}

// GetCartProductsByCartID mocks base method.
func (m *MockCartRepositoryI) GetCartProductsByCartID(cartID uint) (*entity.CartWithRestaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartProductsByCartID", cartID)
	ret0, _ := ret[0].(*entity.CartWithRestaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartProductsByCartID indicates an expected call of GetCartProductsByCartID.
func (mr *MockCartRepositoryIMockRecorder) GetCartProductsByCartID(cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartProductsByCartID", reflect.TypeOf((*MockCartRepositoryI)(nil).GetCartProductsByCartID), cartID)
}

// UpdateItemCountDown mocks base method.
func (m *MockCartRepositoryI) UpdateItemCountDown(cartID, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemCountDown", cartID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemCountDown indicates an expected call of UpdateItemCountDown.
func (mr *MockCartRepositoryIMockRecorder) UpdateItemCountDown(cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemCountDown", reflect.TypeOf((*MockCartRepositoryI)(nil).UpdateItemCountDown), cartID, productID)
}

// UpdateItemCountUp mocks base method.
func (m *MockCartRepositoryI) UpdateItemCountUp(cartID, productID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemCountUp", cartID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemCountUp indicates an expected call of UpdateItemCountUp.
func (mr *MockCartRepositoryIMockRecorder) UpdateItemCountUp(cartID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemCountUp", reflect.TypeOf((*MockCartRepositoryI)(nil).UpdateItemCountUp), cartID, productID)
}
