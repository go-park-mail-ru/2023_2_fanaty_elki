// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	dto "server/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryI is a mock of UserRepositoryI interface.
type MockUserRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryIMockRecorder
}

// MockUserRepositoryIMockRecorder is the mock recorder for MockUserRepositoryI.
type MockUserRepositoryIMockRecorder struct {
	mock *MockUserRepositoryI
}

// NewMockUserRepositoryI creates a new mock instance.
func NewMockUserRepositoryI(ctrl *gomock.Controller) *MockUserRepositoryI {
	mock := &MockUserRepositoryI{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryI) EXPECT() *MockUserRepositoryIMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryI) CreateUser(user *dto.DBCreateUser) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryIMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryI)(nil).CreateUser), user)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepositoryI) FindUserByEmail(value string) (*dto.DBGetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", value)
	ret0, _ := ret[0].(*dto.DBGetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepositoryIMockRecorder) FindUserByEmail(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepositoryI)(nil).FindUserByEmail), value)
}

// FindUserByID mocks base method.
func (m *MockUserRepositoryI) FindUserByID(id uint) (*dto.DBGetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", id)
	ret0, _ := ret[0].(*dto.DBGetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserRepositoryIMockRecorder) FindUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserRepositoryI)(nil).FindUserByID), id)
}

// FindUserByPhone mocks base method.
func (m *MockUserRepositoryI) FindUserByPhone(value string) (*dto.DBGetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhone", value)
	ret0, _ := ret[0].(*dto.DBGetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhone indicates an expected call of FindUserByPhone.
func (mr *MockUserRepositoryIMockRecorder) FindUserByPhone(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhone", reflect.TypeOf((*MockUserRepositoryI)(nil).FindUserByPhone), value)
}

// FindUserByUsername mocks base method.
func (m *MockUserRepositoryI) FindUserByUsername(value string) (*dto.DBGetUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", value)
	ret0, _ := ret[0].(*dto.DBGetUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockUserRepositoryIMockRecorder) FindUserByUsername(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockUserRepositoryI)(nil).FindUserByUsername), value)
}

// UpdateUser mocks base method.
func (m *MockUserRepositoryI) UpdateUser(user *dto.DBUpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryIMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepositoryI)(nil).UpdateUser), user)
}
