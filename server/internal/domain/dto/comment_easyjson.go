// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE9abebc9DecodeServerInternalDomainDto(in *jlexer.Lexer, out *RespGetComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Icon":
			out.Icon = string(in.String())
		case "Text":
			out.Text = string(in.String())
		case "Rating":
			out.Rating = uint8(in.Uint8())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeServerInternalDomainDto(out *jwriter.Writer, in RespGetComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rating))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespGetComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeServerInternalDomainDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespGetComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeServerInternalDomainDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespGetComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeServerInternalDomainDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespGetComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeServerInternalDomainDto(l, v)
}
func easyjsonE9abebc9DecodeServerInternalDomainDto1(in *jlexer.Lexer, out *RespCreateComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Icon":
			out.Icon = string(in.String())
		case "Text":
			out.Text = string(in.String())
		case "Rating":
			out.Rating = uint8(in.Uint8())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeServerInternalDomainDto1(out *jwriter.Writer, in RespCreateComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rating))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespCreateComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeServerInternalDomainDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespCreateComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeServerInternalDomainDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespCreateComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeServerInternalDomainDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespCreateComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeServerInternalDomainDto1(l, v)
}
func easyjsonE9abebc9DecodeServerInternalDomainDto2(in *jlexer.Lexer, out *RespComments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RespComments, 0, 8)
			} else {
				*out = RespComments{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *RespGetComment
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(RespGetComment)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeServerInternalDomainDto2(out *jwriter.Writer, in RespComments) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RespComments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeServerInternalDomainDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespComments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeServerInternalDomainDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespComments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeServerInternalDomainDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespComments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeServerInternalDomainDto2(l, v)
}
func easyjsonE9abebc9DecodeServerInternalDomainDto3(in *jlexer.Lexer, out *ReqCreateComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Text":
			out.Text = string(in.String())
		case "Rating":
			out.Rating = uint8(in.Uint8())
		case "RestaurantID":
			out.RestaurantID = uint(in.Uint())
		case "UserID":
			out.UserID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeServerInternalDomainDto3(out *jwriter.Writer, in ReqCreateComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rating))
	}
	{
		const prefix string = ",\"RestaurantID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RestaurantID))
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqCreateComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeServerInternalDomainDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqCreateComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeServerInternalDomainDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqCreateComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeServerInternalDomainDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqCreateComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeServerInternalDomainDto3(l, v)
}
func easyjsonE9abebc9DecodeServerInternalDomainDto4(in *jlexer.Lexer, out *DBRespGetComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Icon":
			out.Icon = string(in.String())
		case "Text":
			easyjsonE9abebc9DecodeDatabaseSql(in, &out.Text)
		case "Rating":
			out.Rating = uint8(in.Uint8())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeServerInternalDomainDto4(out *jwriter.Writer, in DBRespGetComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		easyjsonE9abebc9EncodeDatabaseSql(out, in.Text)
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rating))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBRespGetComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeServerInternalDomainDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBRespGetComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeServerInternalDomainDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBRespGetComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeServerInternalDomainDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBRespGetComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeServerInternalDomainDto4(l, v)
}
func easyjsonE9abebc9DecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjsonE9abebc9DecodeServerInternalDomainDto5(in *jlexer.Lexer, out *DBRespCreateComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Text":
			easyjsonE9abebc9DecodeDatabaseSql(in, &out.Text)
		case "UserID":
			out.UserID = uint(in.Uint())
		case "Rating":
			out.Rating = uint8(in.Uint8())
		case "RestaurantID":
			out.RestaurantID = uint(in.Uint())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeServerInternalDomainDto5(out *jwriter.Writer, in DBRespCreateComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix[1:])
		easyjsonE9abebc9EncodeDatabaseSql(out, in.Text)
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rating))
	}
	{
		const prefix string = ",\"RestaurantID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RestaurantID))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBRespCreateComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeServerInternalDomainDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBRespCreateComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeServerInternalDomainDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBRespCreateComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeServerInternalDomainDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBRespCreateComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeServerInternalDomainDto5(l, v)
}
func easyjsonE9abebc9DecodeServerInternalDomainDto6(in *jlexer.Lexer, out *DBReqCreateComment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Text":
			easyjsonE9abebc9DecodeDatabaseSql(in, &out.Text)
		case "RestaurantID":
			out.RestaurantID = uint(in.Uint())
		case "UserID":
			out.UserID = uint(in.Uint())
		case "Rating":
			out.Rating = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE9abebc9EncodeServerInternalDomainDto6(out *jwriter.Writer, in DBReqCreateComment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix[1:])
		easyjsonE9abebc9EncodeDatabaseSql(out, in.Text)
	}
	{
		const prefix string = ",\"RestaurantID\":"
		out.RawString(prefix)
		out.Uint(uint(in.RestaurantID))
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.Uint(uint(in.UserID))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBReqCreateComment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE9abebc9EncodeServerInternalDomainDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBReqCreateComment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE9abebc9EncodeServerInternalDomainDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBReqCreateComment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE9abebc9DecodeServerInternalDomainDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBReqCreateComment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE9abebc9DecodeServerInternalDomainDto6(l, v)
}
