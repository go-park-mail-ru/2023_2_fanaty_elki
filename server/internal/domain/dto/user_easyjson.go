// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	sql "database/sql"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeServerInternalDomainDto(in *jlexer.Lexer, out *RespID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto(out *jwriter.Writer, in RespID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RespID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto(l, v)
}
func easyjson9e1087fdDecodeServerInternalDomainDto1(in *jlexer.Lexer, out *ReqUpdateUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Birthday":
			out.Birthday = string(in.String())
		case "PhoneNumber":
			out.PhoneNumber = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Icon":
			out.Icon = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto1(out *jwriter.Writer, in ReqUpdateUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"PhoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqUpdateUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqUpdateUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqUpdateUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqUpdateUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto1(l, v)
}
func easyjson9e1087fdDecodeServerInternalDomainDto2(in *jlexer.Lexer, out *ReqLoginUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto2(out *jwriter.Writer, in ReqLoginUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqLoginUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqLoginUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqLoginUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqLoginUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto2(l, v)
}
func easyjson9e1087fdDecodeServerInternalDomainDto3(in *jlexer.Lexer, out *ReqGetUserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Username":
			out.Username = string(in.String())
		case "Birthday":
			out.Birthday = string(in.String())
		case "PhoneNumber":
			out.PhoneNumber = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Icon":
			out.Icon = string(in.String())
		case "Addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]*RespGetAddress, 0, 8)
					} else {
						out.Addresses = []*RespGetAddress{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *RespGetAddress
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(RespGetAddress)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Addresses = append(out.Addresses, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CurrentAddressId":
			out.Current = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto3(out *jwriter.Writer, in ReqGetUserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"PhoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"Addresses\":"
		out.RawString(prefix)
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Addresses {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CurrentAddressId\":"
		out.RawString(prefix)
		out.Uint(uint(in.Current))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqGetUserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqGetUserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqGetUserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqGetUserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto3(l, v)
}
func easyjson9e1087fdDecodeServerInternalDomainDto4(in *jlexer.Lexer, out *ReqCreateUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Birthday":
			out.Birthday = string(in.String())
		case "PhoneNumber":
			out.PhoneNumber = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Icon":
			out.Icon = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto4(out *jwriter.Writer, in ReqCreateUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"PhoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqCreateUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqCreateUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqCreateUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqCreateUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto4(l, v)
}
func easyjson9e1087fdDecodeServerInternalDomainDto5(in *jlexer.Lexer, out *DBUpdateUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Birthday":
			easyjson9e1087fdDecodeDatabaseSql(in, &out.Birthday)
		case "PhoneNumber":
			out.PhoneNumber = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Icon":
			easyjson9e1087fdDecodeDatabaseSql(in, &out.Icon)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto5(out *jwriter.Writer, in DBUpdateUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		easyjson9e1087fdEncodeDatabaseSql(out, in.Birthday)
	}
	{
		const prefix string = ",\"PhoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		easyjson9e1087fdEncodeDatabaseSql(out, in.Icon)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBUpdateUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBUpdateUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBUpdateUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBUpdateUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto5(l, v)
}
func easyjson9e1087fdDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
func easyjson9e1087fdDecodeServerInternalDomainDto6(in *jlexer.Lexer, out *DBGetUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Birthday":
			easyjson9e1087fdDecodeDatabaseSql(in, &out.Birthday)
		case "PhoneNumber":
			out.PhoneNumber = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Icon":
			easyjson9e1087fdDecodeDatabaseSql(in, &out.Icon)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto6(out *jwriter.Writer, in DBGetUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		easyjson9e1087fdEncodeDatabaseSql(out, in.Birthday)
	}
	{
		const prefix string = ",\"PhoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		easyjson9e1087fdEncodeDatabaseSql(out, in.Icon)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBGetUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBGetUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBGetUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBGetUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto6(l, v)
}
func easyjson9e1087fdDecodeServerInternalDomainDto7(in *jlexer.Lexer, out *DBCreateUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Username":
			out.Username = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Birthday":
			easyjson9e1087fdDecodeDatabaseSql(in, &out.Birthday)
		case "PhoneNumber":
			out.PhoneNumber = string(in.String())
		case "Email":
			out.Email = string(in.String())
		case "Icon":
			easyjson9e1087fdDecodeDatabaseSql(in, &out.Icon)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeServerInternalDomainDto7(out *jwriter.Writer, in DBCreateUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"Username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"Password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Birthday\":"
		out.RawString(prefix)
		easyjson9e1087fdEncodeDatabaseSql(out, in.Birthday)
	}
	{
		const prefix string = ",\"PhoneNumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"Email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		easyjson9e1087fdEncodeDatabaseSql(out, in.Icon)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBCreateUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeServerInternalDomainDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBCreateUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeServerInternalDomainDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBCreateUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeServerInternalDomainDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBCreateUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeServerInternalDomainDto7(l, v)
}
