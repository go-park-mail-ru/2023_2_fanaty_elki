// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	entity "server/internal/domain/entity"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdb0949aDecodeServerInternalDomainDto(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Body":
			if m, ok := out.Body.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Body.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Body = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeServerInternalDomainDto(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Body\":"
		out.RawString(prefix[1:])
		if m, ok := in.Body.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Body.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Body))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeServerInternalDomainDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeServerInternalDomainDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeServerInternalDomainDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeServerInternalDomainDto(l, v)
}
func easyjsonDdb0949aDecodeServerInternalDomainDto1(in *jlexer.Lexer, out *ReqProductID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeServerInternalDomainDto1(out *jwriter.Writer, in ReqProductID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReqProductID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeServerInternalDomainDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReqProductID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeServerInternalDomainDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReqProductID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeServerInternalDomainDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReqProductID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeServerInternalDomainDto1(l, v)
}
func easyjsonDdb0949aDecodeServerInternalDomainDto2(in *jlexer.Lexer, out *ProductSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ProductSlice, 0, 8)
			} else {
				*out = ProductSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *entity.Product
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(entity.Product)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeServerInternalDomainDto2(out *jwriter.Writer, in ProductSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ProductSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeServerInternalDomainDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeServerInternalDomainDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeServerInternalDomainDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeServerInternalDomainDto2(l, v)
}
func easyjsonDdb0949aDecodeServerInternalDomainDto3(in *jlexer.Lexer, out *CartWithRestaurant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Restaurant":
			if in.IsNull() {
				in.Skip()
				out.Restaurant = nil
			} else {
				if out.Restaurant == nil {
					out.Restaurant = new(entity.Restaurant)
				}
				easyjsonDdb0949aDecodeServerInternalDomainEntity(in, out.Restaurant)
			}
		case "Products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]*CartProduct, 0, 8)
					} else {
						out.Products = []*CartProduct{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *CartProduct
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(CartProduct)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Products = append(out.Products, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Promo":
			if in.IsNull() {
				in.Skip()
				out.Promo = nil
			} else {
				if out.Promo == nil {
					out.Promo = new(RespPromo)
				}
				easyjsonDdb0949aDecodeServerInternalDomainDto4(in, out.Promo)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeServerInternalDomainDto3(out *jwriter.Writer, in CartWithRestaurant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Restaurant\":"
		out.RawString(prefix[1:])
		if in.Restaurant == nil {
			out.RawString("null")
		} else {
			easyjsonDdb0949aEncodeServerInternalDomainEntity(out, *in.Restaurant)
		}
	}
	{
		const prefix string = ",\"Products\":"
		out.RawString(prefix)
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Products {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Promo\":"
		out.RawString(prefix)
		if in.Promo == nil {
			out.RawString("null")
		} else {
			easyjsonDdb0949aEncodeServerInternalDomainDto4(out, *in.Promo)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartWithRestaurant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeServerInternalDomainDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartWithRestaurant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeServerInternalDomainDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartWithRestaurant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeServerInternalDomainDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartWithRestaurant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeServerInternalDomainDto3(l, v)
}
func easyjsonDdb0949aDecodeServerInternalDomainDto4(in *jlexer.Lexer, out *RespPromo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = int(in.Int())
		case "Discount":
			out.Discount = uint(in.Uint())
		case "Promo":
			out.Promo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeServerInternalDomainDto4(out *jwriter.Writer, in RespPromo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"Discount\":"
		out.RawString(prefix)
		out.Uint(uint(in.Discount))
	}
	{
		const prefix string = ",\"Promo\":"
		out.RawString(prefix)
		out.String(string(in.Promo))
	}
	out.RawByte('}')
}
func easyjsonDdb0949aDecodeServerInternalDomainEntity(in *jlexer.Lexer, out *entity.Restaurant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = uint(in.Uint())
		case "Name":
			out.Name = string(in.String())
		case "Rating":
			out.Rating = float32(in.Float32())
		case "CommentsCount":
			out.CommentsCount = int(in.Int())
		case "Icon":
			out.Icon = string(in.String())
		case "MinDeliveryTime":
			out.MinDeliveryTime = int(in.Int())
		case "MaxDeliveryTime":
			out.MaxDeliveryTime = int(in.Int())
		case "DeliveryPrice":
			out.DeliveryPrice = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeServerInternalDomainEntity(out *jwriter.Writer, in entity.Restaurant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"CommentsCount\":"
		out.RawString(prefix)
		out.Int(int(in.CommentsCount))
	}
	{
		const prefix string = ",\"Icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"MinDeliveryTime\":"
		out.RawString(prefix)
		out.Int(int(in.MinDeliveryTime))
	}
	{
		const prefix string = ",\"MaxDeliveryTime\":"
		out.RawString(prefix)
		out.Int(int(in.MaxDeliveryTime))
	}
	{
		const prefix string = ",\"DeliveryPrice\":"
		out.RawString(prefix)
		out.Int(int(in.DeliveryPrice))
	}
	out.RawByte('}')
}
func easyjsonDdb0949aDecodeServerInternalDomainDto5(in *jlexer.Lexer, out *CartProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Product":
			if in.IsNull() {
				in.Skip()
				out.Product = nil
			} else {
				if out.Product == nil {
					out.Product = new(entity.Product)
				}
				(*out.Product).UnmarshalEasyJSON(in)
			}
		case "ItemCount":
			out.ItemCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeServerInternalDomainDto5(out *jwriter.Writer, in CartProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Product\":"
		out.RawString(prefix[1:])
		if in.Product == nil {
			out.RawString("null")
		} else {
			(*in.Product).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ItemCount\":"
		out.RawString(prefix)
		out.Int(int(in.ItemCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartProduct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeServerInternalDomainDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartProduct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeServerInternalDomainDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartProduct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeServerInternalDomainDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartProduct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeServerInternalDomainDto5(l, v)
}
