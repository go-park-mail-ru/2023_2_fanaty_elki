// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	dto "server/internal/domain/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockAddressRepositoryI is a mock of AddressRepositoryI interface.
type MockAddressRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepositoryIMockRecorder
}

// MockAddressRepositoryIMockRecorder is the mock recorder for MockAddressRepositoryI.
type MockAddressRepositoryIMockRecorder struct {
	mock *MockAddressRepositoryI
}

// NewMockAddressRepositoryI creates a new mock instance.
func NewMockAddressRepositoryI(ctrl *gomock.Controller) *MockAddressRepositoryI {
	mock := &MockAddressRepositoryI{ctrl: ctrl}
	mock.recorder = &MockAddressRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepositoryI) EXPECT() *MockAddressRepositoryIMockRecorder {
	return m.recorder
}

// CreateAddress mocks base method.
func (m *MockAddressRepositoryI) CreateAddress(address *dto.DBReqCreateUserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockAddressRepositoryIMockRecorder) CreateAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockAddressRepositoryI)(nil).CreateAddress), address)
}

// DeleteAddress mocks base method.
func (m *MockAddressRepositoryI) DeleteAddress(address *dto.DBReqDeleteUserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockAddressRepositoryIMockRecorder) DeleteAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockAddressRepositoryI)(nil).DeleteAddress), address)
}

// GetAddresses mocks base method.
func (m *MockAddressRepositoryI) GetAddresses(UserID uint) (*dto.RespGetAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresses", UserID)
	ret0, _ := ret[0].(*dto.RespGetAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockAddressRepositoryIMockRecorder) GetAddresses(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockAddressRepositoryI)(nil).GetAddresses), UserID)
}

// SetAddress mocks base method.
func (m *MockAddressRepositoryI) SetAddress(address *dto.DBReqUpdateUserAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAddress", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAddress indicates an expected call of SetAddress.
func (mr *MockAddressRepositoryIMockRecorder) SetAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddress", reflect.TypeOf((*MockAddressRepositoryI)(nil).SetAddress), address)
}
