// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRPCClient is the client API for UserRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRPCClient interface {
	FindUserByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DBGetUser, error)
	CreateUser(ctx context.Context, in *DBCreateUser, opts ...grpc.CallOption) (*ID, error)
	UpdateUser(ctx context.Context, in *DBUpdateUser, opts ...grpc.CallOption) (*Nothing, error)
	FindUserByUsername(ctx context.Context, in *Value, opts ...grpc.CallOption) (*DBGetUser, error)
	FindUserByEmail(ctx context.Context, in *Value, opts ...grpc.CallOption) (*DBGetUser, error)
	FindUserByPhone(ctx context.Context, in *Value, opts ...grpc.CallOption) (*DBGetUser, error)
}

type userRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRPCClient(cc grpc.ClientConnInterface) UserRPCClient {
	return &userRPCClient{cc}
}

func (c *userRPCClient) FindUserByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*DBGetUser, error) {
	out := new(DBGetUser)
	err := c.cc.Invoke(ctx, "/user.UserRPC/FindUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCClient) CreateUser(ctx context.Context, in *DBCreateUser, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/user.UserRPC/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCClient) UpdateUser(ctx context.Context, in *DBUpdateUser, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/user.UserRPC/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCClient) FindUserByUsername(ctx context.Context, in *Value, opts ...grpc.CallOption) (*DBGetUser, error) {
	out := new(DBGetUser)
	err := c.cc.Invoke(ctx, "/user.UserRPC/FindUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCClient) FindUserByEmail(ctx context.Context, in *Value, opts ...grpc.CallOption) (*DBGetUser, error) {
	out := new(DBGetUser)
	err := c.cc.Invoke(ctx, "/user.UserRPC/FindUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCClient) FindUserByPhone(ctx context.Context, in *Value, opts ...grpc.CallOption) (*DBGetUser, error) {
	out := new(DBGetUser)
	err := c.cc.Invoke(ctx, "/user.UserRPC/FindUserByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRPCServer is the server API for UserRPC service.
// All implementations should embed UnimplementedUserRPCServer
// for forward compatibility
type UserRPCServer interface {
	FindUserByID(context.Context, *ID) (*DBGetUser, error)
	CreateUser(context.Context, *DBCreateUser) (*ID, error)
	UpdateUser(context.Context, *DBUpdateUser) (*Nothing, error)
	FindUserByUsername(context.Context, *Value) (*DBGetUser, error)
	FindUserByEmail(context.Context, *Value) (*DBGetUser, error)
	FindUserByPhone(context.Context, *Value) (*DBGetUser, error)
}

// UnimplementedUserRPCServer should be embedded to have forward compatible implementations.
type UnimplementedUserRPCServer struct {
}

func (UnimplementedUserRPCServer) FindUserByID(context.Context, *ID) (*DBGetUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByID not implemented")
}
func (UnimplementedUserRPCServer) CreateUser(context.Context, *DBCreateUser) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserRPCServer) UpdateUser(context.Context, *DBUpdateUser) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserRPCServer) FindUserByUsername(context.Context, *Value) (*DBGetUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByUsername not implemented")
}
func (UnimplementedUserRPCServer) FindUserByEmail(context.Context, *Value) (*DBGetUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmail not implemented")
}
func (UnimplementedUserRPCServer) FindUserByPhone(context.Context, *Value) (*DBGetUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByPhone not implemented")
}

// UnsafeUserRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRPCServer will
// result in compilation errors.
type UnsafeUserRPCServer interface {
	mustEmbedUnimplementedUserRPCServer()
}

func RegisterUserRPCServer(s grpc.ServiceRegistrar, srv UserRPCServer) {
	s.RegisterService(&UserRPC_ServiceDesc, srv)
}

func _UserRPC_FindUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServer).FindUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPC/FindUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServer).FindUserByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRPC_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBCreateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPC/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServer).CreateUser(ctx, req.(*DBCreateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRPC_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBUpdateUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPC/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServer).UpdateUser(ctx, req.(*DBUpdateUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRPC_FindUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServer).FindUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPC/FindUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServer).FindUserByUsername(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRPC_FindUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServer).FindUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPC/FindUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServer).FindUserByEmail(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRPC_FindUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRPCServer).FindUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserRPC/FindUserByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRPCServer).FindUserByPhone(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRPC_ServiceDesc is the grpc.ServiceDesc for UserRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserRPC",
	HandlerType: (*UserRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserByID",
			Handler:    _UserRPC_FindUserByID_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserRPC_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserRPC_UpdateUser_Handler,
		},
		{
			MethodName: "FindUserByUsername",
			Handler:    _UserRPC_FindUserByUsername_Handler,
		},
		{
			MethodName: "FindUserByEmail",
			Handler:    _UserRPC_FindUserByEmail_Handler,
		},
		{
			MethodName: "FindUserByPhone",
			Handler:    _UserRPC_FindUserByPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
